#!/usr/bin/env python3
"""
Configuration Stripe pour PassPrint
"""
import stripe
import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

def configure_stripe():
    """Configurer Stripe avec les cl√©s appropri√©es"""
    # R√©cup√©rer les cl√©s depuis les variables d'environnement
    public_key = os.getenv('STRIPE_PUBLIC_KEY')
    secret_key = os.getenv('STRIPE_SECRET_KEY')

    if not public_key or not secret_key:
        print("‚ö†Ô∏è  Cl√©s Stripe non configur√©es")
        print("üí° Ajoutez vos cl√©s dans le fichier .env")
        return False

    # Configurer Stripe
    stripe.api_key = secret_key

    print("‚úÖ Stripe configur√© avec succ√®s")
    print(f"üîë Cl√© publique: {public_key[:20]}...")
    print(f"üîê Cl√© secr√®te: {secret_key[:20]}...")

    return True

def create_test_products():
    """Cr√©er des produits de test dans Stripe"""
    try:
        # Produits de test
        products = [
            {
                'name': 'Banderole Publicitaire Standard',
                'price': 25000,  # 25,000 FCFA
                'description': 'Banderole PVC 2x1m r√©sistante'
            },
            {
                'name': 'Stickers Personnalis√©s',
                'price': 15000,  # 15,000 FCFA
                'description': '100 stickers vinyle d√©coup√©s'
            },
            {
                'name': 'Cl√© USB 32GB',
                'price': 8500,   # 8,500 FCFA
                'description': 'Cl√© USB personnalisable'
            }
        ]

        print("üì¶ Cr√©ation des produits Stripe...")

        for product_data in products:
            # Cr√©er le produit
            product = stripe.Product.create(
                name=product_data['name'],
                description=product_data['description'],
                type='service'
            )

            # Cr√©er le prix en FCFA (pas de d√©cimales)
            price = stripe.Price.create(
                product=product.id,
                unit_amount=product_data['price'],
                currency='xof',  # Franc CFA
            )

            print(f"  ‚úÖ {product_data['name']}: {product_data['price']} FCFA")

        return True

    except Exception as e:
        print(f"‚ùå Erreur cr√©ation produits Stripe: {e}")
        return False

def test_stripe_connection():
    """Tester la connexion Stripe"""
    try:
        # Tester la connexion en r√©cup√©rant le solde
        balance = stripe.Balance.retrieve()
        print("‚úÖ Connexion Stripe r√©ussie")
        print(f"üí∞ Solde disponible: {balance.available[0].amount if balance.available else 0} {balance.currency}")

        return True

    except stripe.error.AuthenticationError:
        print("‚ùå Erreur d'authentification Stripe")
        print("üí° V√©rifiez vos cl√©s API Stripe")
        return False

    except Exception as e:
        print(f"‚ùå Erreur connexion Stripe: {e}")
        return False

def main():
    """Configuration principale Stripe"""
    print("üí≥ Configuration Stripe pour PassPrint")
    print("=" * 50)

    if not configure_stripe():
        print("‚ùå Configuration Stripe √©chou√©e")
        return False

    if test_stripe_connection():
        print("‚úÖ Stripe fonctionne correctement")

        # Demander si l'utilisateur veut cr√©er des produits de test
        create_products = input("Cr√©er des produits de test Stripe? (o/n): ").lower().strip()
        if create_products == 'o':
            create_test_products()
    else:
        print("‚ùå Impossible de continuer sans connexion Stripe valide")

    print("\nüéâ Configuration Stripe termin√©e!")
    print("\nüìã Prochaines √©tapes:")
    print("1. Testez les paiements avec les cl√©s de test")
    print("2. Passez en production avec les cl√©s live")
    print("3. Configurez les webhooks Stripe")

if __name__ == "__main__":
    main()